# Name of the GitHub Action
name: Deploy New APK and Update JSON

# This action runs automatically whenever a new release is 'published' on GitHub
on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write # This permission is crucial to allow the action to commit files back to your repo

    steps:
      # Step 1: Check out the 'main' branch of your repository
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main

      # Step 2: Download the APK from the release using a wildcard
      # This step will now fail with a clear error if no .apk file is found in the release assets.
      - name: Download release asset
        uses: robinraju/release-downloader@v1.9
        with:
          repository: ${{ github.repository }}
          tag: ${{ github.ref_name }}
          # Finds any file ending with .apk you've uploaded to the release
          fileName: "*.apk" 
          # Makes the action fail if it cannot find an asset matching the fileName
          fail-if-not-found: true
          # Renames the downloaded file to a consistent, versioned format
          target: "downloads/app-release-${{ github.ref_name }}.apk"
          token: ${{ secrets.GITHUB_TOKEN }}

      # Step 3: Set up the Node.js environment for our script
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Step 4: Run the Node.js script to create/update all necessary JSON files
      - name: Update apk-info.json and version-check.json
        env:
          RELEASE_NOTES: ${{ github.event.release.body }}
          GITHUB_REPO: ${{ github.repository }}
          RELEASE_TAG: ${{ github.ref_name }}
        run: |
          const fs = require('fs');
          const path = require('path');
          
          const tag = process.env.RELEASE_TAG;
          const versionedApkName = `app-release-${tag}.apk`;
          const apkPath = path.join('./downloads', versionedApkName);
          const apkInfoPath = './apk-info.json';
          const appCheckPath = './version-check.json';
          
          if (!fs.existsSync(apkPath)) {
            console.error(`ERROR: Critical internal error. The APK was not found at ${apkPath} after the download step.`);
            process.exit(1);
          }
          
          const stats = fs.statSync(apkPath);
          const fileSizeInMB = (stats.size / (1024 * 1024)).toFixed(1);
          const versionName = tag.replace(/^v/, '');
          const today = new Date().toISOString().slice(0, 10);
          
          // --- Update apk-info.json for the website ---
          const webInfo = {
            version: versionName,
            update_date: today,
            size: `${fileSizeInMB} MB`,
            apk_url: `./downloads/${versionedApkName}`
          };
          fs.writeFileSync(apkInfoPath, JSON.stringify(webInfo, null, 2));
          console.log(`Updated ${apkInfoPath} to point to ${versionedApkName}.`);

          // --- Update version-check.json for the app ---
          const versionParts = versionName.split('.').map(part => parseInt(part, 10));
          const generatedVersionCode = (versionParts[0] * 10000) + ((versionParts[1] || 0) * 100) + (versionParts[2] || 0);
          const releaseNotes = process.env.RELEASE_NOTES || "General improvements and bug fixes.";
          const downloadUrl = `https://raw.githubusercontent.com/${process.env.GITHUB_REPO}/main/downloads/${versionedApkName}`;
          
          const appCheckInfo = {
            versionCode: generatedVersionCode,
            versionName: versionName,
            downloadUrl: downloadUrl,
            whatsNew: releaseNotes
          };
          fs.writeFileSync(appCheckPath, JSON.stringify(appCheckInfo, null, 4));
          console.log(`Generated ${appCheckPath} with versionCode ${generatedVersionCode}.`);
        shell: node {0}

      # Step 5: Commit the new APK and the updated JSON files back to your 'main' branch
      - name: Commit and push changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(release): Add APK and update JSON for version ${{ github.ref_name }}"
          # This pattern dynamically includes the new versioned APK
          file_pattern: "downloads/app-release-${{ github.ref_name }}.apk apk-info.json version-check.json"
