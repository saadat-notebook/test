# Name of the GitHub Action
name: Deploy New APK and Update JSON

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write 

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Download release asset
        uses: robinraju/release-downloader@v1.9
        with:
          repository: ${{ github.repository }}
          tag: ${{ github.ref_name }}
          fileName: "*.apk" 
          fail-if-not-found: true
          target: "downloads/app-release-${{ github.ref_name }}.apk"
          token: ${{ secrets.GITHUB_TOKEN }}

      # --- THIS IS THE NEW DEBUG STEP ---
      # It will show us the exact filename that was created.
      - name: Verify download and list files
        run: |
          echo "Listing all files in the 'downloads' directory to debug..."
          ls -la downloads
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Update apk-info.json and version-check.json
        env:
          RELEASE_NOTES: ${{ github.event.release.body }}
          GITHUB_REPO: ${{ github.repository }}
          # Let's trim whitespace from the tag just in case, making the script more robust
          RELEASE_TAG: ${{ github.ref_name }}
        run: |
          const fs = require('fs');
          const path = require('path');
          
          // Robustly trim whitespace from the tag name
          const tag = process.env.RELEASE_TAG.trim(); 
          
          const versionedApkName = `app-release-${tag}.apk`;
          const apkPath = path.join('./downloads', versionedApkName);
          const apkInfoPath = './apk-info.json';
          const appCheckPath = './version-check.json';
          
          if (!fs.existsSync(apkPath)) {
            // Give a more helpful error message
            console.error(`ERROR: The script could not find the APK at the expected path: ${apkPath}`);
            console.error("This is often caused by an accidental space in the Git tag used for the release.");
            console.error(`Script was using tag: '${tag}'`);
            process.exit(1);
          }
          
          const stats = fs.statSync(apkPath);
          const fileSizeInMB = (stats.size / (1024 * 1024)).toFixed(1);
          const versionName = tag.replace(/^v/, '');
          const today = new Date().toISOString().slice(0, 10);
          
          const webInfo = {
            version: versionName,
            update_date: today,
            size: `${fileSizeInMB} MB`,
            apk_url: `./downloads/${versionedApkName}`
          };
          fs.writeFileSync(apkInfoPath, JSON.stringify(webInfo, null, 2));

          const versionParts = versionName.split('.').map(part => parseInt(part, 10));
          const generatedVersionCode = (versionParts[0] * 10000) + ((versionParts[1] || 0) * 100) + (versionParts[2] || 0);
          const releaseNotes = process.env.RELEASE_NOTES || "General improvements and bug fixes.";
          const downloadUrl = `https://raw.githubusercontent.com/${process.env.GITHUB_REPO}/main/downloads/${versionedApkName}`;
          
          const appCheckInfo = {
            versionCode: generatedVersionCode,
            versionName: versionName,
            downloadUrl: downloadUrl,
            whatsNew: releaseNotes
          };
          fs.writeFileSync(appCheckPath, JSON.stringify(appCheckInfo, null, 4));
        shell: node {0}

      - name: Commit and push changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(release): Add APK and update JSON for version ${{ github.ref_name }}"
          file_pattern: "downloads/app-release-${{ github.ref_name }}*.apk apk-info.json version-check.json"
