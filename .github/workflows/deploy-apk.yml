# Name of the GitHub Action
name: Deploy New APK and Update JSON

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # Step 1: Checkout main branch
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main

      # Step 2: Download the release APK
      - name: Download release asset (app-release.apk)
        uses: robinraju/release-downloader@v1.9
        with:
          repository: ${{ github.repository }}
          tag: ${{ github.ref_name }}
          fileName: "app-release.apk"
          target: "downloads/"
          token: ${{ secrets.GITHUB_TOKEN }}

      # Step 3: Rename the APK with version tag
      - name: Rename APK with version
        run: mv downloads/app-release.apk downloads/app-release-${{ github.ref_name }}.apk

      # Step 4: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Step 5: Update JSON files
      - name: Update apk-info.json and version-check.json
        env:
          RELEASE_NOTES: ${{ github.event.release.body }}
          GITHUB_REPO: ${{ github.repository }}
        run: |
          const fs = require('fs');

          const tagName = "${{ github.ref_name }}"; // e.g. v2.5.3
          const versionName = tagName.replace('v', '');
          const apkFileName = `app-release-${tagName}.apk`;
          const apkPath = `./downloads/${apkFileName}`;

          const stats = fs.statSync(apkPath);
          const fileSizeInMB = (stats.size / (1024 * 1024)).toFixed(1);
          const today = new Date().toISOString().slice(0, 10);

          // --- apk-info.json (for webpage) ---
          const apkInfoPath = './apk-info.json';
          const webInfo = {
            version: versionName,
            update_date: today,
            size: `${fileSizeInMB} MB`,
            apk_url: `./downloads/${apkFileName}`
          };
          fs.writeFileSync(apkInfoPath, JSON.stringify(webInfo, null, 2));
          console.log(`Updated ${apkInfoPath}`);

          // --- version-check.json (for Android app) ---
          const appCheckPath = './version-check.json';
          const versionParts = versionName.split('.').map(p => parseInt(p, 10));
          const generatedVersionCode = (versionParts[0] * 10000) + (versionParts[1] * 100) + (versionParts[2] || 0);

          const releaseNotes = process.env.RELEASE_NOTES || "General improvements and bug fixes.";
          const downloadUrl = `https://raw.githubusercontent.com/${process.env.GITHUB_REPO}/main/downloads/${apkFileName}`;

          const appCheckInfo = {
            versionCode: generatedVersionCode,
            versionName: versionName,
            downloadUrl: downloadUrl,
            whatsNew: releaseNotes
          };
          fs.writeFileSync(appCheckPath, JSON.stringify(appCheckInfo, null, 4));
          console.log(`Generated ${appCheckPath} with versionCode ${generatedVersionCode}.`);

      # Step 6: Commit and push changes
      - name: Commit and push changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(release): Auto-update APK and JSON for version ${{ github.ref_name }}"
          file_pattern: "downloads/*.apk apk-info.json version-check.json"
